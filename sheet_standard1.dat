<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the first page of the standard character
      sheet for output. The character sheet has been carved into a simple two-column
      presentation that is used by many game systems, with some information on the
      left and other material on the right. You can use whatever overall layout you
      prefer, using this sample as a guideline.

      A variety of display techniques have been used on this one character sheet to
      provide examples of how to present information in different ways. You will
      likely choose one or two of these methods and use them exclusively within your
      own data files, but this gives you various styles to choose from.

      The second page of the character sheet will be found in "sheet_standard2.dat".
-->

<document signature="Hero Lab Data">

  <!-- Hero Lab & Game System Logos
        NOTE! These could be easily wrapped inside a template or used directly within
              a layout, as we do here. Both methods are perfectly reasonable.
  -->

  <!-- oHLLogo portal - Hero Lab logo -->
  <portal
    id="oHLLogo"
    style="outTitle">
    <output_image
      image="sheet_hllogo.bmp">
      </output_image>
    </portal>

  <!-- oGameLogo portal - game system logo -->
  <portal
    id="oGameLogo"
    style="outTitle"
    width="0"
    height="0">
    <output_image
      image="sheet_gamelogo.bmp">
      </output_image>
    </portal>


  <!-- Hero Info -->

  <!-- oCharSec portal - Character portal -->
  <portal
    id="oCharSec"
    style="outSection">
    <output_label
      text="Character"/>
    </portal>
  
  <!-- oCharBox portal - Background box -->
  <portal
    id="oCharBox"
    style="outNormal">
    <output_label
      text=" "/>
    </portal>
  
  <portal
    id="oNameLbl"
    style="outNormLt">
    <output_label text="Name"/>
    </portal>
    
  <portal
    id="oHeroName"
    style="outBNormCt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.actorname
        ]]>
        </labeltext>
      </output_label>
    </portal>
    
  <portal
    id="oCmdPkgLbl"
    style="outNormLt">
    <output_label text="Command Package"/>
    </portal>
    
  <portal
    id="oHeroCPkg"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.CmdPckge"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal>
  
  <portal
    id="oBackgrLbl"
    style="outNormLt">
    <output_label text="Background Package"/>
    </portal>
    
  <portal
    id="oHeroBckgr"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.Bckgrnd"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal>
  
  <portal
    id="oRaceLbl"
    style="outNormLt">
    <output_label text="Sophont Type"/>
    </portal>
    
  <portal
    id="oHeroRace"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.Race"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal>
  
  <!-- Company Info -->

  <!-- oCompSec portal - Company portal -->
  <portal
    id="oCompSec"
    style="outSection">
    <output_label
      text="Company"/>
    </portal>
  
  <portal
    id="oNameLbl2"
    style="outNameLg">
    <output_label text="Name"/>
    </portal>
    
  <!--portal
    id="CompName"
    style="outBNormCt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.actorname
        ]]>
        </labeltext>
      </output_label>
    </portal>
    
  <portal
    id="oCmdPkgLbl"
    style="outNormLt">
    <output_label text="Command Package"/>
    </portal>
    
  <portal
    id="oHeroCPkg"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.CmdPckge"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal>
  
  <portal
    id="oBackgrLbl"
    style="outNormLt">
    <output_label text="Background Package"/>
    </portal>
    
  <portal
    id="oHeroBckgr"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.Bckgrnd"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal>
  
  <portal
    id="oRaceLbl"
    style="outNormLt">
    <output_label text="Sophont Type"/>
    </portal>
    
  <portal
    id="oHeroRace"
    style="outBNormLt">
    <output_label>
      <labeltext><![CDATA[
        @text = hero.firstchild["component.Race"].field[name].text
        ]]>
        </labeltext>
      </output_label>
    </portal-->
    
  <!-- oDerivBox portal - Background box -->
  <portal
    id="oDerivBox"
    style="outNormal">
    <output_label
      text="  "/>
    </portal>
  
  <portal
    id="oHealthBx2"
    style="outNormal">
    <output_label
      text=" ">
      </output_label>
    </portal>
  
  <!-- oRiPP portal - oRiPP graphic -->
  <portal
    id="oRiPP"
    style="outTitle">
    <output_image
      image="RiPP.bmp">
      </output_image>
    </portal>

  <!-- oSkillPen portal -->  
  <portal
    id="oPenLabel"
    style="outNormLt">
    <output_label text="Skill Penalties"/>
    </portal>
  
  <portal
    id="oPenValBox"
    style="outNormal">
    <output_label
      text=" "/>
    </portal>
    
  <portal
    id="oPenBox"
    style="outNormal">
    <output_label
      text=" "/>
    </portal>

  <!-- oSkillsSec portal - Skills portal -->
  <portal
    id="oSkillsSec"
    style="outSection">
    <output_label
      text="Skills"/>
    </portal>
  
  <!-- oSkillsBox portal - Background box -->
  <portal
    id="oSkillsBox"
    style="outNormal">
    <output_label
      text=" "/>
    </portal>
    
  <portal
  id="oCSkills"
  style="outNormal">
    <output_table 
      component="Skill" 
      showtemplate="oSkillPick">
      <list><![CDATA[
        Skills.Combat 
        ]]></list>
      <headertitle><![CDATA[
        @text="Combat Skills"
      ]]></headertitle>
      </output_table>
  </portal>
  
  <portal
  id="oPSkills"
  style="outNormal">
    <output_table 
      component="Skill" 
      showtemplate="oSkillPick">
      <list><![CDATA[
        Skills.Physical 
        ]]></list>
      <headertitle><![CDATA[
        @text="Physical Skills"
      ]]></headertitle>
      </output_table>
  </portal>
  
  <portal
  id="oMSkills"
  style="outNormal">
    <output_table 
      component="Skill" 
      showtemplate="oSkillPick">
      <list><![CDATA[
        Skills.Mental 
        ]]></list>
      <headertitle><![CDATA[
        @text="Mental Skills"
      ]]></headertitle>
      </output_table>
  </portal>
  
  <portal
  id="oSSkills"
  style="outNormal">
    <output_table 
      component="Skill" 
      showtemplate="oSkillPick">
      <list><![CDATA[
        Skills.Social 
        ]]></list>
      <headertitle><![CDATA[
        @text="Social Skills"
      ]]></headertitle>
      </output_table>
  </portal>
  
  <!-- oGear portal
        This is a table of all Gear carried by the actor. The gear list needs to
        exclude weapons and armor, since those are already listed in the separate
        sections for those item types.
  -->
  <portal
    id="oGear"
    style="outNormal">
    <output_table
      component="Gear"
      showtemplate="oGearPick">
      <list><![CDATA[
        !component.WeaponBase & !component.Defense & !Print.NoPrint
        ]]></list>
      <headertitle><![CDATA[
        var moneyvalue as number
        var money as string
        moneyvalue = herofield[acCashNet].value
        call Money
        @text = "Gear  (Expense: " & money & ")"
        ]]></headertitle>
      </output_table>
    </portal>


  <!-- oArmor portal
        This is a table of all Armor and Shields carried by the actor.
  -->
  <portal
    id="oArmor"
    style="outNormal">
    <output_table
      component="Defense"
      showtemplate="oArmorPick"
      showsortset="Armory">
      <list><![CDATA[
        ]]></list>
      <headertitle><![CDATA[
        @text = "Armor"
        ]]></headertitle>
      </output_table>
    </portal>


  <!-- oWeapon portal
        This is a table of all Weapons carried by the actor. Weapons use the same
        template for both the contents and the header across the top. See the
        template for more details on this.
  -->
  <portal
    id="oWeapon"
    style="outNormal">
    <output_table
      component="WeaponBase"
      showtemplate="oWeapPick"
      headertemplate="oWeapPick"
      showsortset="Armory">
      <list><![CDATA[
        ]]></list>
      </output_table>
    </portal>


  <!-- oAdjust portal
        This is a table of all Activated Adjustments applied to the actor, which
        includes all permanent adjustments, all activated abilities, and all activated
        temporary adjustments. We use a two-column table layout for compactness.
  -->
  <portal
    id="oAdjust"
    style="outNormal">
    <output_table
      component="Adjustment"
      showtemplate="oAdjPick"
      columns="2">
      <list><![CDATA[
        Helper.Activated
        ]]></list>
      <headertitle><![CDATA[
        @text = "Activated Adjustments"
        ]]></headertitle>
      </output_table>
    </portal>


  <!-- oPersonal portal
        This is a table in which we output the personal details (background) of the
        character. We use a table so we can put the info on the first page if there
        is room and easily spill it onto the second page if not.
  -->
  <portal
    id="oPersonal"
    style="outNormal">
    <output_table
      component="Personal"
      showtemplate="oPersonal"
      varyheight="yes">
      <list><![CDATA[
        !Helper.NoPersText & hero#source.ShowDetail
        ]]></list>
      <headertitle><![CDATA[
        @text = "Background & Personal Details"
        ]]></headertitle>
      </output_table>
    </portal>

  
  
    
  <!-- oDerivPick template
        This template presents the various derived traits. Derived traits simply list
        the name and final value for each, stacked vertically. We use margins around 
        the template to get a large indent on either side and insert a little bit of 
        vertical spacing.
  -->
  <template
    id="oDerivPick"
    name="Output Derived Traits Table"
    compset="Trait"
    marginhorz="5"
    marginvert="5">

    <portal
      id="name"
      style="outSmallCt">
      <output_label
        field="trtAbbrev">
        </output_label>
      </portal>

    <portal
      id="value"
      style="outBNormCt">
      <output_label
        field="trtFinal">
        </output_label>
      </portal>

    <position><![CDATA[
      ~our width is based on the name width
      ~ width = portal[name].width
      
      ~our height is based on stacking the two together with margins
      height = portal[name].height + portal[value].height
      
      doneif (issizing <> 0)
      
      portal[value].width = width * 2 / 3
      
      ~center everything horizontally
      perform portal[name].centerhorz
      perform portal[value].centerhorz

      ~position the name at the topmost edge
      perform portal[name].alignedge[top,0]

      ~position the value at the bottommost edge
      perform portal[value].alignedge[bottom,0]
      
      
      ]]></position>

    </template>


  <!-- oPowerPick template
        This template presents the Health and Power traits, along with empty boxes
        that can be checked off during play to track damage and the use of power. We
        use margins around the template to indent a little on either side and insert
        some vertical spacing between each entry.
  -->
  <template
    id="oPowerPick"
    name="Output Health/Power Table"
    compset="Trait"
    marginhorz="25"
    marginvert="5">

    <portal
      id="name"
      style="outNameLg">
      <output_label
        field="name">
        </output_label>
      </portal>

    <portal
      id="value"
      style="outValueLg">
      <output_label
        field="trtFinal">
        </output_label>
      </portal>

    <portal
      id="boxes"
      style="outNameLg">
      <output_label>
        <labeltext><![CDATA[
          ~output empty boxes for each point, with a gap every 5; we fit a maximum
          ~of 15 boxes on a line, splitting additional boxes onto extra lines
          var i as number
          var last as number
          last = field[trtFinal].value - 1
          for i = 0 to last
            if (i % 5 = 0) then
              if (i <> 0) then
                if (i % 15 = 0) then
                  @text &= "{br}"
                  endif
                endif
              @text &= "{horz 15}"
              endif
            @text &= "{bmpscale 3 output_box}"
            next
          ]]></labeltext>
        </output_label>
      </portal>

    <position><![CDATA[
      ~our height is the tallest portal within (which is the name if we have no boxes)
      height = maximum(portal[name].height,portal[boxes].textheight)
      doneif (issizing <> 0)

      ~pick a suitable fixed width for the name
      portal[name].width = 180

      ~pick a suitable fixed width for the value and position it next to the name
      perform portal[value].alignrel[ltor,name,5]
      portal[value].width = 70

      ~position the boxes in the remaining space on the right of the value
      perform portal[boxes].alignrel[ltor,value,40]
      portal[boxes].width = width - portal[boxes].left

      ~center all portals vertically
      perform portal[name].centervert
      perform portal[value].centervert
      perform portal[boxes].centervert

      ~shift the boxes downward a little bit; this is because the boxes are only
      ~bitmaps, which are never drawn within the descender portion of the text, and
      ~that causes them to appear higher than we want them
      portal[boxes].top += 3
      ]]></position>

    </template>


  <!-- oAbilPick template
        This template presents the Special Abilities, consisting of the prominent
        name and the summary text in small letters next to it. We use a small margin
        for vertical spacing between abilities.
  -->
  <template
    id="oAbilPick"
    name="Output Special Abilities Table"
    compset="Ability"
    marginvert="2">

    <portal
      id="details"
      style="outNameLg">
      <output_label>
        <labeltext><![CDATA[
          @text = field[name].text & "{/b}  {size 32}" & field[summary].text
          ]]></labeltext>
        </output_label>
      </portal>

    <position><![CDATA[
      ~our details width spans the entire template width
      portal[details].width = width

      ~limit our portal height to a single line of output
      portal[details].lineheight = 1

      ~our height is the height of our portal
      height = portal[details].bottom
      ]]></position>
    </template>


  <!-- oSkillPick template
        This template presents the list of Skills, showing the name, value, 
        and specialties.
  -->
  <template
    id="oSkillPick"
    name="Output Skills Table"
    compset="Skill"
    marginhorz="2"
    marginvert="2">

    <portal
      id="name"
      style="outNormLt">
      <output_label
        field="name">
        </output_label>
      </portal>

    <portal
      id="value"
      style="outBNormLt">
      <output_label
        field="trtFinal">
        </output_label>
      </portal>

    <portal
      id="special"
      style="outBNormLt">
      <output_label
        field="sklSpecs">
        </output_label>
      </portal>

    <position><![CDATA[
      ~our height is the height of the tallest portal
      height = portal[name].height
      doneif (issizing <> 0)

      ~position the name to the left and let it take up a third of the space.
      portal[name].left = 0
      portal[name].width = width / 3
      
      ~position the value to the right of that, and a ninth of the space
      portal[value].left = portal[name].right + 5
      portal[value].width = width / 9
      
      ~ Let the Specialties take up the rest of the space
      portal[special].left = portal[value].right + 50
      portal[special].width = width - portal[special].left

      ~size the name to fit the available space
      ~ perform portal[name].sizetofit[20]
      perform portal[name].autoheight 
      ~ perform portal[special].sizetofit[16]
      perform portal[special].autoheight
      
      ~center all portals vertically
      perform portal[name].centervert
      perform portal[value].centervert
      perform portal[special].centervert
      ]]></position>

    </template>


  <!-- oGearPick template
        This template presents the basic gear possessed. Gear that is in quantities
        other than one has the proper quantity listed next to it. We use a small
        horizontal margin to indent everything slightly.
  -->
  <template
    id="oGearPick"
    name="Output Gear Table"
    compset="Equipment"
    marginhorz="25">

    <portal
      id="value"
      style="outBNormLt">
      <output_label>
        <labeltext><![CDATA[
          if (stackable = 0) then
            @text = ""
          elseif (field[stackQty].value = 1) then
            @text = ""
          else
            @text = field[stackQty].text & "x"
            endif
          ]]></labeltext>
        </output_label>
      </portal>

    <portal
      id="name"
      style="outNormLt">
      <output_label>
        <labeltext><![CDATA[
          @text = field[name].text
          ]]></labeltext>
        </output_label>
      </portal>

    <position><![CDATA[
      ~our height is the height of the tallest portal
      height = portal[name].height
      doneif (issizing <> 0)

      ~assign a fixed width to the value and position the name to the right
      portal[value].width = 100
      perform portal[name].alignrel[ltor,value,20]

      ~size the name to fit the available space
      portal[name].width = width - portal[name].left
      perform portal[name].sizetofit[36]
      perform portal[name].autoheight

      ~center all portals vertically
      perform portal[value].centervert
      perform portal[name].centervert
      ]]></position>

    </template>


  <!-- oArmorPick template
        This template presents the armor possessed.
  -->
  <template
    id="oArmorPick"
    name="Output Armor Table"
    compset="Equipment"
    marginvert="2"
    marginhorz="5">

    <!--portal
      id="equipped"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = "{bmpscale 3 output_armor}"
          ]]></labeltext>
        </output_label>
      </portal-->

    <portal
      id="name"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = field[name].text
          ]]></labeltext>
        </output_label>
      </portal>

    <!--portal
      id="defense"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = field[defDefense].text
          ]]></labeltext>
        </output_label>
      </portal>
      
    <portal
      id="DR"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = field[defDR].text
          ]]></labeltext>
        </output_label>
      </portal>
      
    <portal
      id="Hull"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = field[defHull].text
          ]]></labeltext>
        </output_label>
      </portal>
      
    <portal
      id="special"
      style="outNameMed">
      <output_label>
        <labeltext><![CDATA[
          @text = field[defSpecial].text
          ]]></labeltext>
        </output_label>
      </portal-->
      
    <position><![CDATA[
      ~our height is the height of the tallest portal
      ~height = maximum(portal[name].height,portal[equipped].height)
      height = portal[name].height
      doneif (issizing <> 0)

      ~if the armor is not equipped, hide the bitmap
      ~if (tagis[Equipped.Equipped] = 0) then
      ~  portal[equipped].visible = 0
      ~  endif

      ~portal[equipped].visible = 1
      portal[name].visible = 1
      ~portal[defense].visible = 0
      ~portal[DR].visible = 0
      ~portal[Hull].visible = 0
      ~portal[special].visible = 0
      
      ~center all portals vertically
      ~perform portal[equipped].centervert
      perform portal[name].centervert

      ~portal[equipped].width = 50
      portal[name].width = 200
      ~portal[defense].width = 50
      ~portal[DR].width = 50
      ~portal[Hull].width = 50
        
      ~align everything horizontally
      ~perform portal[name].alignrel[ltor,equipped,5]
      portal[name].left = 0
      ~perform portal[defense].alignrel[ltor,name,5]
      ~perform portal[DR].alignrel[ltor,defense,5]
      ~perform portal[Hull].alignrel[ltor,DR,5]
      ~perform portal[special].alignrel[ltor,Hull,5]

      ~portal[special].width = width - (portal[Hull].right + 5 + 5)
      
      ~size the name to fit the available space
      portal[name].width = width - portal[name].left
      ~ perform portal[name].sizetofit[36]
      ~ perform portal[name].autoheight

      ~shift the "equipped" bitmap downward a little bit; this is because it is a
      ~lone bitmap drawn via encoded text, and bitmaps are never drawn within the
      ~descender portion of the text, which causes it to appear higher than we want it
      ~portal[equipped].top += 4
      ]]></position>

    </template>


  <!-- oWeapPick template
        This template presents the weapons possessed by the character. Each weapon
        lists its damage and special qualities, with ranged weapons including the
        reload and ammo details.

        The template is also used as a header for the table. As such, the template
        includes additional portals that are only used as part of the header (i.e.
        they are designated by the "isheader" attribute). All header portals are
        positioned via the "header" script, which is invoked AFTER the normal "position"
        script. Header portals can therefore be positioned relative to non-header
        portals, making it easy to align the header portals based on the actual content
        portals.

        NOTE! We CANNOT use a non-zero "marginhorz" attribute for the template to
        apply an indent on each side. The titlebar inherits the same margin restriction
        as the contents area, so the title would not span the full width. Consequently,
        we manually indent everything on either side within the "position" script.
  -->
  <template
    id="oWeapPick"
    name="Output Weapon Table"
    compset="Weapon"
    marginvert="2">

    <portal
      id="name"
      style="outNameSm">
      <output_label
        field="shortname">
        </output_label>
      </portal>

    <portal
      id="damage"
      style="outNameSm">
      <output_label
        field="wpDmg">
        </output_label>
      </portal>
      
    <portal
      id="ammotype"
      style="outNameSm">
      <output_label
        field="wpAmmo"
        ismultiline="yes">
        </output_label>
      </portal>

    <portal
      id="reload"
      style="outNameSm">
      <output_label
        field="wpReload">
        </output_label>
      </portal>
      
    <portal
      id="notes"
      style="outNameSm">
      <output_label
        field="wpNotes">
        </output_label>
      </portal>

    <!-- Portals used as the header -->
    <portal
      id="hdrtitle"
      style="outTitle"
      isheader="yes">
      <output_label
        text="Weapons">
        </output_label>
      </portal>

    <portal
      id="hdrname"
      style="outHeader"
      isheader="yes">
      <output_label
        text="Name">
        </output_label>
      </portal>
      
    <portal
      id="hdrdamage"
      style="outHeader"
      isheader="yes">
      <output_label
        text="Damage">
        </output_label>
      </portal>
      
    <portal
      id="hdrammo"
      style="outHeader"
      isheader="yes">
      <output_label
        text="Ammo">
        </output_label>
      </portal>
      
    <portal
      id="hdrreload"
      style="outHdrSm"
      isheader="yes">
      <output_label
        text="Reload">
        </output_label>
      </portal>
      
    <portal
      id="hdrnotes"
      style="outHeader"
      isheader="yes">
      <output_label
        text="Rules &amp; Qualities">
        </output_label>
      </portal>
      
    <position><![CDATA[
      ~our initial height is based on the name portal
      height = portal[name].height
      doneif (issizing <> 0)

      ~center all portals vertically
      perform portal[name].centervert
      perform portal[damage].centervert
      perform portal[ammotype].centervert
      perform portal[reload].centervert
      perform portal[notes].centervert

      ~position the range with the same baseline as the rest of the text; since it
      ~uses a smaller font, it will have a smaller height, so centering it will have
      ~it appear to float up relative to the other text
      ~perform portal[range].alignrel[btob,name,0]

      ~establish suitable fixed widths for the various columns of data
      portal[name].width = 200
      portal[damage].width = 250
      portal[ammotype].width = 200
      portal[reload].width = 100
      
      ~position everything horizontally, leaving a margin on both sides appropriately
      portal[name].left = 5
      portal[damage].left = portal[name].right + 10
      portal[reload].left = portal[damage].right + 10
      portal[ammotype].left = portal[reload].right + 10
      portal[notes].left = portal[ammotype].right + 10
      
      portal[notes].width = width - portal[ammotype].right - 10

      ~size the name to fit the available space
      perform portal[name].sizetofit[8]
      perform portal[name].autoheight
      perform portal[name].centervert
      
      perform portal[damage].sizetofit[8]
      perform portal[damage].autoheight
      perform portal[damage].centervert
      
      perform portal[reload].sizetofit[8]
      perform portal[reload].autoheight
      perform portal[reload].centervert
      
      perform portal[ammotype].sizetofit[8]
      perform portal[ammotype].autoheight
      perform portal[ammotype].centervert
      
      perform portal[notes].sizetofit[8]
      perform portal[notes].autoheight
      perform portal[notes].centervert
      
      ]]></position>

    <header><![CDATA[
      ~our header height is the title plus a gap plus the header text
      height = portal[hdrtitle].height + 10 + portal[hdrdamage].height
      doneif (issizing <> 0)

      ~our title spans the entire width of the template
      portal[hdrtitle].width = width

      ~each of our header labels has the same width as the corresponding data beneath
      portal[hdrname].width = portal[name].width
      portal[hdrdamage].width = portal[damage].width
      portal[hdrreload].width = portal[reload].width
      portal[hdrammo].width = portal[ammotype].width
      portal[hdrnotes].width = portal[notes].width
      
      ~center each header label on the corresponding data beneath
      perform portal[hdrname].centeron[horz,name]
      perform portal[hdrdamage].centeron[horz,damage]
      perform portal[hdrreload].centeron[horz,reload]
      perform portal[hdrammo].centeron[horz,ammotype]
      perform portal[hdrnotes].centeron[horz,notes]
      
      ~align all header labels at the bottom of the header region
      perform portal[hdrname].alignedge[bottom,0]
      perform portal[hdrdamage].alignedge[bottom,0]
      perform portal[hdrreload].alignedge[bottom,0]
      perform portal[hdrammo].alignedge[bottom,0]
      perform portal[hdrnotes].alignedge[bottom,0]
      
      ]]></header>

    </template>


  <!-- oAdjPick template
        This template presents the activated adjustments for the character.
  -->
  <template
    id="oAdjPick"
    name="Output Adjustments Table"
    compset="Adjustment"
    marginhorz="10">

    <portal
      id="name"
      style="outNormLt">
      <output_label
        field="adjName">
        </output_label>
      </portal>

    <position><![CDATA[
      ~our height is the vertical extent of our portals
      height = portal[name].height
      doneif (issizing <> 0)

      ~size the name to fit the available space
      portal[name].width = width
      perform portal[name].sizetofit[36]
      perform portal[name].autoheight
      perform portal[name].centervert
      ]]></position>

    </template>


  <!-- oPortrait template
        This template presents the character portrait, showing the first portrait
        assigned to the character.
  -->
  <template
    id="oPortrait"
    name="Output Image"
    compset="Actor">

    <portal
      id="image"
      style="outNormal">
      <output_image
        field="acTacImage">
        </output_image>
      </portal>

    <portal
      id="imgBorder"
      style="outCharImg">
      <output_label
        text=" ">
        </output_label>
      </portal>

    <position><![CDATA[
      ~if we don't have an image or character images are not included, set our
      ~height to 0, hide the image, and get out
      if (!hero.tagis[source.ShowImage] + !portal[image].isimage > 0) then
        height = 0
        portal[image].visible = 0
        portal[imgBorder].visible = 0
        done
        endif

      ~leave a margin of one pixel around all edges to draw our border
      var margin as number
      margin = 1
      portal[image].left = margin
      portal[image].top = margin
      portal[image].width = width - margin * 2
      portal[image].height = height - margin * 2

      ~cap our height at a maximum of three inches
      portal[image].height = minimum(portal[image].height,900)

      ~optimally fit the image to the region available
      perform portal[image].imagefit

      ~center the image if it's narrower than the available width
      perform portal[image].centerhorz

      ~our full height is the bottom of the image plus our margin
      height = portal[image].bottom + margin

      ~set the border to span our full dimensions
      portal[imgBorder].width = width
      portal[imgBorder].height = height
      ]]></position>

    </template>


  <!-- oValidate template
        This template presents the validation report at the bottom of the sheet.
  -->
  <template
    id="oValidate"
    name="Output Validation"
    compset="Actor">

    <portal
      id="border"
      style="outValBox">
      <output_label
        text=" ">
        </output_label>
      </portal>

    <portal
      id="validate"
      style="outValid">
      <output_label>
        <labeltext><![CDATA[

          ~start with an opening that lists the number of issues
          @text = "Validation Report (" & hero.errorcount & " issues):"

          ~turn off bold and reduce the font size slightly
          @text &= "{/b}{size 34} "

          ~first we've got the validation report stream; if there's nothing to
          ~report, indicate that fact
          if (hero.errorcount = 0) then
            @text &= "Nothing identified"
          else
            @text &= hero.errorlist
            endif

          ~if there are any activated abilities, report them
          var active as string
          foreach pick in hero from Ability where "User.Activation & Helper.Activated & !Hide.InPlay"
            active = splice(active,eachpick.field[name].text,", ")
            nexteach

          ~append any active abilities to the report
          if (empty(active) = 0) then
            @text &= "; {b}Active:{/b} " & active
            endif
          ]]></labeltext>
        </output_label>
      </portal>

    <position><![CDATA[
      ~limit the report to a maximum of 4 lines of details; if there are more than
      ~4 lines, we assume the GM will be reviewing the character by hand
      var maxlines as number
      maxlines = 4

      ~leave bit of a margin on the left and right sides for a gap from the border
      portal[validate].width = width - 20

      ~calculate the height of the validation report, limiting it appropriately
      perform portal[validate].autoheight
      if (portal[validate].height > portal[validate].fontheight * maxlines) then
        portal[validate].lineheight = maxlines
        endif

      ~the border is the full width of the template and includes some padding at the
      ~top and bottom for a vertical gap from the border
      portal[border].width = width
      portal[border].height = portal[validate].height + 12

      ~our overall height is the height of the border
      height = portal[border].height

      ~center the validation report text within the template
      perform portal[validate].centerhorz
      perform portal[validate].centervert
      ]]></position>
    </template>


  <!-- oPersonal template
        This template presents the background and personal details for the character.
  -->
  <template
    id="oPersonal"
    name="Output Personal Details Table"
    compset="Personal">

    <portal
      id="info"
      style="outPlainLt">
      <output_label
        field="perInfo">
        </output_label>
      </portal>

    <position><![CDATA[
      ~size the name to fit the available space
      portal[info].width = width
      perform portal[info].autoheight

      ~our height is the vertical extent of our portal
      height = portal[info].textheight
      ]]></position>

    </template>

  <!-- oRiPPs layout -->
  <layout
    id="oRiPPs">
    <portalref portal="oRiPP"/>
    <position><![CDATA[
      portal[oRiPP].top = 0
      perform portal[oRiPP].centerhorz
      ]]></position>
      </layout>

  <!-- oLogos layout
        This layout sizes and positions the Hero Lab and game system logos. The logos
        can be either stacked or shown side-by-side, based on the global variable set
        within the sheet script.
  -->
  <layout
    id="oLogos">
    <portalref portal="oHLLogo"/>
    <portalref portal="oGameLogo"/>
    <position><![CDATA[
      var temp as number
      var logogap as number
      var scale as number

      ~if our logos are stacked, scale them for stacked orientation
      if (scenevalue[stacklogos] <> 0) then
        logogap = 20
        scale = 1.8

      ~otherwise, scale our logos for side by side orientation
      else
        logogap = 40
        temp = portal[oGameLogo].width + portal[oHLLogo].width
        scale = (width - logogap) / temp
        if (scale > 2.0) then
          scale = 2.0
          endif
        endif

      ~scale both logos appropriately
      portal[oGameLogo].width *= scale
      portal[oGameLogo].height *= scale
      portal[oHLLogo].width *= scale
      portal[oHLLogo].height *= scale

      ~if our logos are stacked, position them properly
      if (scenevalue[stacklogos] <> 0) then

        ~position the logos horizontally
        perform portal[oGameLogo].centerhorz
        perform portal[oHLLogo].centerhorz

        ~position the Hero Lab logo beneath the game system logo
        perform portal[oHLLogo].alignrel[ttob,oGameLogo,logogap]

        ~our total height is the bottom of the lower logo
        height = portal[oHLLogo].bottom

      ~ Otherwise, position them side by side
      else

        ~position the logos horizontally, centering them together in the space
        temp = portal[oGameLogo].width + portal[oHLLogo].width
        temp = (width - temp - logogap) / 2
        portal[oGameLogo].left = temp
        perform portal[oHLLogo].alignrel[ltor,oGameLogo,logogap]

        ~our total height is the bottom of the tallest logo
        height = maximum(portal[oHLLogo].height,portal[oGameLogo].height)

        ~center the logos vertically
        perform portal[oGameLogo].centervert
        perform portal[oHLLogo].centervert
        endif
      ]]></position>
    </layout>

  <!-- layout oCharInfo -->
  <layout
    id="oCharInfo">
    <portalref portal="oCharSec"/>
    <portalref portal="oCharBox"/>
    <portalref portal="oNameLbl"/>
    <portalref portal="oHeroName"/>
    <portalref portal="oCmdPkgLbl"/>
    <portalref portal="oHeroCPkg"/>
    <portalref portal="oBackgrLbl"/>
    <portalref portal="oHeroBckgr"/>
    <portalref portal="oRaceLbl"/>
    <portalref portal="oHeroRace"/>
    <position><![CDATA[
      ~position the header at the top with the hero details beneath the name
      perform portal[oCharSec].autoplace[0]
      
      portal[oNameLbl].left = portal[oCharSec].left + 5
      portal[oCmdPkgLbl].left = portal[oCharSec].left + 5
      portal[oBackgrLbl].left = portal[oCharSec].left + 5
      portal[oRaceLbl].left = portal[oCharSec].left + 5
      
      portal[oNameLbl].top = portal[oCharSec].bottom + 5
      portal[oCmdPkgLbl].top = portal[oNameLbl].bottom + 5
      portal[oBackgrLbl].top = portal[oCmdPkgLbl].bottom + 5
      portal[oRaceLbl].top = portal[oBackgrLbl].bottom + 5
      
      perform portal[oNameLbl].autoheight
      perform portal[oCmdPkgLbl].autoheight
      perform portal[oBackgrLbl].autoheight
      perform portal[oRaceLbl].autoheight
      
      portal[oNameLbl].height += 5
      portal[oCmdPkgLbl].height += 5
      portal[oBackgrLbl].height += 5
      portal[oRaceLbl].height += 5
      
      portal[oNameLbl].top = portal[oCharSec].bottom + 5
      portal[oCmdPkgLbl].top = portal[oNameLbl].bottom + 5
      portal[oBackgrLbl].top = portal[oCmdPkgLbl].bottom + 5
      portal[oRaceLbl].top = portal[oBackgrLbl].bottom + 5
      
      ~ The width is 3/5 except Name, which is 1/4
      portal[oNameLbl].width = width / 4
      portal[oCmdPkgLbl].width = width * 3 / 5
      portal[oBackgrLbl].width = width * 3 / 5
      portal[oRaceLbl].width = width * 3 / 5
      
      portal[oHeroName].left = portal[oNameLbl].right + 5 
      portal[oHeroCPkg].left = portal[oCmdPkgLbl].right + 5
      portal[oHeroBckgr].left = portal[oBackgrLbl].right + 5
      portal[oHeroRace].left = portal[oRaceLbl].right + 5
      
      portal[oHeroName].top = portal[oNameLbl].top 
      portal[oHeroCPkg].top = portal[oCmdPkgLbl].top
      portal[oHeroBckgr].top = portal[oBackgrLbl].top
      portal[oHeroRace].top = portal[oRaceLbl].top
      
      portal[oHeroName].width = width - portal[oNameLbl].right - 5
      portal[oHeroCPkg].width = width - portal[oCmdPkgLbl].right - 5
      portal[oHeroBckgr].width = width - portal[oBackgrLbl].right - 5
      portal[oHeroRace].width = width - portal[oRaceLbl].right - 5
      
      portal[oCharBox].top = portal[oCharSec].bottom
      portal[oCharBox].left = 0
      portal[oCharBox].width = width
      portal[oCharBox].height = portal[oHeroRace].bottom - portal[oCharSec].bottom + 5
      
      perform portal[oHeroName].sizetofit[2]
      perform portal[oHeroCPkg].sizetofit[2]
      perform portal[oHeroBckgr].sizetofit[2]
      perform portal[oHeroRace].sizetofit[2]

      height = portal[oCharBox].height + portal[oCharBox].top
      
    ]]></position>
    </layout>
    
  <!-- layout oCompInfo -->
  <layout
    id="oCompInfo">
    <portalref portal="oCompSec"/>
    <portalref portal="oNameLbl2"/>
    <!-- more items to come -->
    <position><![CDATA[
      ~position the company name at the top with the hero details beneath the name
      perform portal[oCompSec].autoplace[0]
      
      portal[oNameLbl2].left = portal[oCompSec].left
      
      portal[oNameLbl2].top = portal[oCompSec].bottom + 5
      
      ~ The width is 1/2 except Name, which is 1/4
      portal[oNameLbl2].width = width / 4
      
    ]]></position>
    </layout>

  <layout
    id="oDerived">
    <portalref portal="oHealthBx2"/>
    <portalref portal="oDerivBox"/>
    <templateref template="oDerivPick" reference="oHealth" thing="trHealth"/>
    <templateref template="oDerivPick" reference="oDefense" thing="trDefense"/>
    <templateref template="oDerivPick" reference="oDodge" thing="trDodge"/>
    <templateref template="oDerivPick" reference="oDR" thing="trDR"/>
    <position><![CDATA[
      template[oHealth].left = 5
      template[oHealth].top = 5
      template[oHealth].width = width / 9      
      perform template[oHealth].render
      
      ~ Height is based on our tallest element, which is the templates
      height = template[oHealth].height + 10
            
      portal[oHealthBx2].left = template[oHealth].right + 20
      portal[oHealthBx2].width = width * 2 / 3 - template[oHealth].right - 25
      portal[oHealthBx2].height = template[oHealth].height
      portal[oHealthBx2].top = template[oHealth].bottom - portal[oHealthBx2].height + 5
      
      template[oDR].left = width * 6 / 9
      template[oDR].top = template[oHealth].top
      template[oDR].width = width / 9
      perform template[oDR].render
      
      template[oDefense].left = width * 7 / 9
      template[oDefense].top = template[oHealth].top
      template[oDefense].width = width / 9
      perform template[oDefense].render
      
      template[oDodge].left = width * 8 / 9
      template[oDodge].top = template[oHealth].top
      template[oDodge].width = width / 9
      perform template[oDodge].render
      
      portal[oDerivBox].top = 0
      portal[oDerivBox].left = 0
      portal[oDerivBox].width = width + 5
      portal[oDerivBox].height = height + 5
    ]]></position>
    </layout>
    
  
  <layout
    id="oSkillPen">
    <portalref portal="oPenLabel"/>
    <portalref portal="oPenValBox"/>
    <portalref portal="oPenBox"/>
    <position><![CDATA[
      portal[oPenLabel].top = 5
      portal[oPenLabel].left = 5
      portal[oPenValBox].left = portal[oPenLabel].right + 5
      portal[oPenValBox].width = width - portal[oPenLabel].right - 5
      portal[oPenBox].left = left
      portal[oPenBox].top = 0
      portal[oPenBox].width = width
      portal[oPenBox].height = portal[oPenValBox].height + 10
      height = portal[oPenBox].height
    ]]></position>
    </layout>
    
  <layout
    id="oSkills">
    <portalref portal="oSkillsSec"/>
    <portalref portal="oSkillsBox"/>
    <portalref portal="oCSkills"/>
    <portalref portal="oSSkills"/>
    <portalref portal="oMSkills"/>
    <portalref portal="oPSkills"/>
    <position><![CDATA[
      var colWidth as number
      colWidth = (width - 30) / 2
      portal[oSkillsSec].width = width
      portal[oSkillsBox].width = width
      portal[oCSkills].left = 5
      portal[oMSkills].left = colWidth + 20
      portal[oCSkills].top = portal[oSkillsSec].bottom
      portal[oMSkills].top = portal[oSkillsSec].bottom
      portal[oCSkills].width = colWidth
      portal[oMSkills].width = colWidth
      portal[oCSkills].height = 800
      portal[oMSkills].height = 800
      
      portal[oPSkills].left = 5
      portal[oSSkills].left = colWidth + 20
      portal[oPSkills].top = portal[oCSkills].bottom
      portal[oSSkills].top = portal[oMSkills].bottom
      portal[oPSkills].width = colWidth
      portal[oSSkills].width = colWidth
      portal[oPSkills].height = 800
      portal[oSSkills].height = 800
      
      portal[oSkillsBox].top = 0
      portal[oSkillsBox].left = 0
      portal[oSkillsBox].height = portal[oPSkills].bottom + 5
      
      height = portal[oSkillsBox].height
      ]]></position>
    </layout>

  <!-- oArmory layout
        This layout contains the tables of armor and weapons that appears in the
        character sheet. If the two tables are too large to fit in the available 
        space, they are truncated intelligently, with the remaining gear appearing 
        on a second spillover sheet.
  -->
  <layout
    id="oArmory">
    <portalref portal="oArmor"/>
    <portalref portal="oWeapon"/>
    <position><![CDATA[
      ~position the armor table at the top and the weapon table beneath it
      perform portal[oWeapon].autoplace
      perform portal[oArmor].autoplace
      
      ~if all equipment was shown, everything fits, so update height and we're done
      if (portal[oWeapon].itemsleft + portal[oArmor].itemsleft = 0) then
        height = autoextent
        done
        endif

      ~if we got here, then there is more gear than will fit within the space, so
      ~calculate the space that the two tables can use, including the gap between
      var remain as number
      remain = height - scenevalue[sectiongap]

      ~if the height of both tables exceeds the available space, we need to divvy
      ~up that space between the two tables
      if (portal[oArmor].height + portal[oWeapon].height > remain) then

        ~if the armor table is less than half the space, limit the weapon table
        ~to whatever space is leftover
        if (portal[oArmor].height < remain / 2) then
          portal[oWeapon].height = remain - portal[oArmor].height

        ~if the weapon table is less than half the space, limit the armor table
        ~to whatever space is leftover
        elseif (portal[oWeapon].height < remain / 2) then
          portal[oArmor].height = remain - portal[oWeapon].height

        ~otherwise, both tables are larger than half the space, so we need to limit
        ~the height of both of them
        ~NOTE! If we just divide the remaining amount by two and set both tables to
        ~that height, we could end up with both tables being truncated by more than
        ~a half item, with the combined height being a full item short of taking up
        ~the full space. So we have to set the height of one table to half the
        ~remaining space, then subtract that table's final height from our remaining
        ~space, and finally set that as the height for the second table.
        else
          portal[oWeapon].height = remain / 2
          portal[oArmor].height = remain - portal[oWeapon].height
          endif
        endif

      ~position the weapon table beneath the armor; if no armor, omit it
      if (portal[oArmor].itemsshown = 0) then
        portal[oArmor].visible = 0
      else
        portal[oWeapon].top = portal[oArmor].bottom + scenevalue[sectiongap]
        endif

      ~our layout height is the extent of the bottommost portal
      height = portal[oWeapon].bottom
      ]]></position>
    </layout>


  <!-- oAdjust layout
        This layout contains the list of activated adjustments for the character.
  -->
  <layout
    id="oAdjust">
    <portalref portal="oAdjust"/>
    <position><![CDATA[
      ~if there are no adjustments, then make sure our height is zero
      if (portal[oAdjust].itemsshown = 0) then
        portal[oAdjust].visible = 0
        height = 0
        done
        endif

      ~otherwise, position the adjustment table at the top and our layout height
      ~is the extent of the elements within
      perform portal[oAdjust].autoplace
      height = autoextent
      ]]></position>
    </layout>


  <!-- oValidate layout
        This layout contains the validation report at the bottom of the sheet.
  -->
  <layout
    id="oValidate">
    <templateref template="oValidate" thing="actor"/>
    <position><![CDATA[
      ~position the validation template at the top
      perform template[oValidate].autoplace

      ~the height of the layout is the bottommost extent of the elements within
      height = autoextent
      ]]></position>
    </layout>


  <!-- standard1 sheet
        This is the first page of the standard character sheet, which coordinates the
        output of a whole bunch of layouts containing different pieces of information
        for the character. Layouts are estimated to perform whatever calculations are
        necessary within that layout, such as its overall dimensions. Once estimated,
        the dimensions of the layout can be used to properly position and size any
        subsequent layouts that depend on it. So the overall process is to process
        layouts in an order that progressively fills the sheet with aligned material.
  -->
  <sheet
    id="standard1"
    name="Standard character sheet, page #1">
    <layoutref layout="oRiPPs"/>
    <layoutref layout="oLogos"/>
    <layoutref layout="oCharInfo"/>
    <layoutref layout="oCompInfo"/>
    <layoutref layout="oDerived"/>
    <layoutref layout="oSkillPen"/>
    <layoutref layout="oSkills"/>
    <!--layoutref layout="oAdjust"/-->
    <layoutref layout="oArmory"/>
    <!--layoutref layout="oValidate"/-->
    <position><![CDATA[
      ~set this global variable to 1 if you want the logos to be stacked; a value
      ~of zero places them side-by-side
      scenevalue[stacklogos] = 0

      ~setup the gap to be used between the various sections of the character sheet
      autogap = 40
      scenevalue[sectiongap] = autogap

      ~calculate the width of the two columns of the character sheet, leaving a
      ~suitable center gap between them
      var colwidth2 as number
      colwidth2 = (width - 50) / 2
      
      var colwidth3 as number
      colwidth3 = (width - 50) / 3

      ~if the user wants to omit the validation report, then hide it and allow the
      ~rest of the sheet to fill that space; otherwise, output the layout and the
      ~top of the validation report establishes the bottom for all other output
      var extent as number
      extent = height
      ~if (hero.tagis[source.Validation] = 0) then
      ~  layout[oValidate].visible = 0
      ~  extent = height
      ~else
      ~  layout[oValidate].width = width
      ~  perform layout[oValidate].render
      ~  layout[oValidate].top = height - layout[oValidate].height
      ~  extent = layout[oValidate].top - autogap
      ~  endif

      ~position the Character Info layout in the upper left corner
      layout[oCharInfo].width = colwidth3
      layout[oCharInfo].height = extent - layout[oCharInfo].top
      perform layout[oCharInfo].render
      
      layout[oCompInfo].left = colwidth3 + 16
      layout[oCompInfo].width = colwidth3
      layout[oCompInfo].height = extent - layout[oCompInfo].top
      perform layout[oCompInfo].render
      

      ~position the activated adjustments at the bottom on the left; this will
      ~establish the remaining space available on the left for armor and weapons
      ~layout[oAdjust].width = width
      ~perform layout[oAdjust].render
      ~layout[oAdjust].top = extent - layout[oAdjust].height

      layout[oDerived].width = width - colwidth3
      layout[oDerived].top = layout[oCharInfo].bottom
      layout[oDerived].height = extent - layout[oDerived].top
      perform layout[oDerived].render
      
      layout[oSkillPen].width = width - colwidth3
      layout[oSkillPen].top = layout[oDerived].bottom
      layout[oSkillPen].height = extent - layout[oSkillPen].top
      perform layout[oSkillPen].render
      
      ~position the logos layout in the upper right corner
      layout[oLogos].width = colwidth3
      perform layout[oLogos].render
      layout[oLogos].left = width - colwidth3

      layout[oRiPPs].left = width - colwidth3
      layout[oRiPPs].width = colwidth3
      layout[oRiPPs].top = layout[oLogos].bottom
      perform layout[oRiPPs].render
      
      layout[oSkills].top = layout[oSkillPen].bottom
      layout[oSkills].width = width
      perform layout[oSkills].render
      
      ~position the weapons layout within the remaining space
      layout[oArmory].width = width
      layout[oArmory].top = layout[oSkills].bottom
      layout[oArmory].height = 600
      perform layout[oArmory].render

      ]]></position>
    </sheet>


  </document>
